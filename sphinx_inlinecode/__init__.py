import sphinx
from pathlib import Path
from bs4 import BeautifulSoup
from typing import Dict, Any, List
from collections import defaultdict
from sphinx.application import Sphinx


def setup(app: Sphinx) -> Dict[str, Any]:
    app.setup_extension('sphinx.ext.viewcode')
    app.connect('build-finished', add_source_code)

    return {'version': sphinx.__display_version__, 'parallel_read_safe': True}


def add_source_code(app, exception):
    root_dir = Path(f"{app.outdir}/_modules").resolve()
    if not root_dir.exists():
        return

    block_map = get_code_blocks(root_dir)


def get_code_blocks(root_dir: Path) -> Dict[Path, List[Dict]]:
    """Retrieve code blocks from HTML files generated by :mod:`sphinx.ext.viewcode`

    :param root_dir: path of the ``build/html/_modules`` directory
    :return: mapping of documentation file paths to lists of code block data.
    """
    files = get_source_code_files(root_dir)
    mapping = defaultdict(list)

    for file in files:
        soup = BeautifulSoup(file.read_text(encoding='utf-8'), 'html.parser')
        code_blocks = soup.findAll('div', 'viewcode-block')

        for block in code_blocks:
            backlink = block.find("a", "viewcode-back")
            target, qualname = backlink.get('href').split("#")

            target_file = Path(file.parent / Path(target)).resolve()
            mapping[target_file].append({
                "ref_id": qualname,
                "code": block
            })

    return mapping


def get_source_code_files(root: Path) -> List[Path]:
    """Retrieves HTML files created by :mod:`sphinx.ext.viewcode`

    :param root: path of the ``build/html/_modules`` directory
    :return: list of all files in the directory and its subdirectories
    """
    files = []

    for entry in root.iterdir():
        if entry.is_file():
            files.append(entry)
        elif entry.is_dir():
            files.extend(get_source_code_files(entry))

    return files
